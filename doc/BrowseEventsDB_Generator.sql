-- MySQL Script generated by MySQL Workbench
-- Mon Sep  7 16:25:12 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema BrowseEventsDB
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `BrowseEventsDB` ;

-- -----------------------------------------------------
-- Schema BrowseEventsDB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `BrowseEventsDB` DEFAULT CHARACTER SET utf8 COLLATE utf8_bin ;
SHOW WARNINGS;
USE `BrowseEventsDB` ;

-- -----------------------------------------------------
-- Table `User`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `User` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `User` (
  `idUsers` INT NOT NULL AUTO_INCREMENT,
  `Username` VARCHAR(45) NULL,
  `Password` VARCHAR(45) NULL,
  `Email` VARCHAR(45) NULL,
  `FirstName` VARCHAR(45) NULL,
  `LastName` VARCHAR(45) NULL,
  `UserType_idUserType` INT NOT NULL DEFAULT 3,
  `VerificationCode` VARCHAR(45) NULL,
  `EmailStatus` ENUM('not verified', 'verified') NULL DEFAULT 'not verified',
  `LastLoginDate` DATETIME NULL DEFAULT NOW(),
  `isApproved` BIT NOT NULL DEFAULT 0,
  PRIMARY KEY (`idUsers`))
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `UserType`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `UserType` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `UserType` (
  `idUserType` INT NOT NULL AUTO_INCREMENT,
  `Type` VARCHAR(45) NULL,
  `Description` VARCHAR(255) NULL,
  PRIMARY KEY (`idUserType`))
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `Event`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Event` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `Event` (
  `idEvent` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NULL,
  `Datetime` DATE NULL,
  `Price` FLOAT NULL,
  `Place` VARCHAR(45) NULL,
  `TicketNumber` INT NULL,
  `Description` VARCHAR(255) NULL,
  `Image` VARCHAR(255) NOT NULL,
  `User_idUsers` INT NOT NULL,
  `LastModifyDate` DATETIME NULL DEFAULT NOW(),
  PRIMARY KEY (`idEvent`),
  CONSTRAINT `fk_Event_User1`
    FOREIGN KEY (`User_idUsers`)
    REFERENCES `User` (`idUsers`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `Image`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Image` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `Image` (
  `Image` VARCHAR(255) NOT NULL,
  `Description` VARCHAR(255) NOT NULL,
  `Event_idEvent` INT NOT NULL,
  PRIMARY KEY (`Image`),
  CONSTRAINT `fk_Image_Event1`
    FOREIGN KEY (`Event_idEvent`)
    REFERENCES `Event` (`idEvent`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `Cart`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Cart` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `Cart` (
  `idCart` INT NOT NULL AUTO_INCREMENT,
  `Event_idEvent` INT NOT NULL,
  `User_idUsers` INT NOT NULL,
  `TicketQuantity` INT NOT NULL,
  `Date` DATETIME NULL DEFAULT NOW(),
  `isAcquired` BIT NOT NULL DEFAULT 0,
  PRIMARY KEY (`idCart`),
  CONSTRAINT `fk_Event_has_User_Event1`
    FOREIGN KEY (`Event_idEvent`)
    REFERENCES `Event` (`idEvent`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Event_has_User_User1`
    FOREIGN KEY (`User_idUsers`)
    REFERENCES `User` (`idUsers`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `Notification`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Notification` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `Notification` (
  `idNotification` INT NOT NULL AUTO_INCREMENT,
  `Title` VARCHAR(45) NULL,
  `Description` VARCHAR(512) NULL,
  `Date` DATETIME NULL DEFAULT NOW(),
  PRIMARY KEY (`idNotification`))
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `User_has_Notification`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `User_has_Notification` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `User_has_Notification` (
  `User_idUsers` INT NOT NULL,
  `Notification_idNotification` INT NOT NULL,
  `isRead` BIT NOT NULL DEFAULT 0,
  PRIMARY KEY (`User_idUsers`, `Notification_idNotification`),
  CONSTRAINT `fk_User_has_Notification_User1`
    FOREIGN KEY (`User_idUsers`)
    REFERENCES `User` (`idUsers`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_User_has_Notification_Notification1`
    FOREIGN KEY (`Notification_idNotification`)
    REFERENCES `Notification` (`idNotification`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `Category`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Category` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `Category` (
  `idCategory` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NULL,
  `Description` VARCHAR(255) NULL,
  PRIMARY KEY (`idCategory`))
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `Category_has_Event`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Category_has_Event` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `Category_has_Event` (
  `Event_idEvent` INT NOT NULL,
  `Category_idCategory` INT NOT NULL,
  PRIMARY KEY (`Event_idEvent`, `Category_idCategory`),
  CONSTRAINT `fk_Event_has_Category_Event1`
    FOREIGN KEY (`Event_idEvent`)
    REFERENCES `Event` (`idEvent`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Event_has_Category_Category1`
    FOREIGN KEY (`Category_idCategory`)
    REFERENCES `Category` (`idCategory`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `Session`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Session` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `Session` (
  `idSession` VARCHAR(512) NOT NULL,
  `User_idUsers` INT NOT NULL,
  `Date` DATETIME NULL DEFAULT NOW(),
  `Token` VARCHAR(512) NULL,
  PRIMARY KEY (`idSession`),
  CONSTRAINT `fk_Session_User1`
    FOREIGN KEY (`User_idUsers`)
    REFERENCES `User` (`idUsers`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

SHOW WARNINGS;
USE `BrowseEventsDB`;

DELIMITER $$

USE `BrowseEventsDB`$$
DROP TRIGGER IF EXISTS `Event_AFTER_UPDATE` $$
SHOW WARNINGS$$
USE `BrowseEventsDB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BrowseEventsDB`.`Event_AFTER_UPDATE` AFTER UPDATE ON `Event` FOR EACH ROW
BEGIN
	DECLARE finished INTEGER DEFAULT 0;
    DECLARE tmpUser INTEGER DEFAULT 0;

	-- declare cursor for users who bought the event's tickets
	DEClARE curUser
		CURSOR FOR 
			SELECT User_idUsers AS idUser FROM Cart WHERE Event_idEvent = OLD.idEvent AND isAcquired = 1;

	-- declare NOT FOUND handler
	DECLARE CONTINUE HANDLER 
        FOR NOT FOUND SET finished = 1;

	IF NEW.Place != OLD.Place THEN
		INSERT INTO Notification(Title, Description) VALUES("Place changed", CONCAT("The place has been changed for ", NEW.Name, " to ", NEW.Place));
        SET @idNotification = (SELECT idNotification FROM Notification ORDER BY idNotification DESC LIMIT 1);
        OPEN curUser;
			getUser: LOOP
				FETCH curUser INTO tmpUser;
				IF finished = 1 THEN 
					LEAVE getUser;
				END IF;
				-- insert elements into the table
				INSERT INTO User_has_Notification (User_idUsers, Notification_idNotification) VALUES(tmpUser, @idNotification);
			END LOOP getUser;
		CLOSE curUser;
    END IF;
    IF NEW.Datetime != OLD.Datetime THEN
		INSERT INTO Notification(Title, Description) VALUES("Date changed", CONCAT("The date has been changed for ", NEW.Name, " to ", NEW.Datetime));
        SET @idNotification = (SELECT idNotification FROM Notification ORDER BY idNotification DESC LIMIT 1);
        OPEN curUser;
			getUser: LOOP
				FETCH curUser INTO tmpUser;
				IF finished = 1 THEN 
					LEAVE getUser;
				END IF;
				-- insert elements into the table
				INSERT INTO User_has_Notification (User_idUsers, Notification_idNotification) VALUES(tmpUser, @idNotification);
			END LOOP getUser;
		CLOSE curUser;
    END IF;
     IF NEW.TicketNumber = 0 AND NEW.TicketNumber != OLD.TicketNumber THEN
		INSERT INTO Notification(Title, Description) VALUES("Sold out", CONCAT("All tickets sold for ", NEW.Name));
        SET @idNotification = (SELECT idNotification FROM Notification ORDER BY idNotification DESC LIMIT 1);
        INSERT INTO User_has_Notification (User_idUsers, Notification_idNotification) VALUES(NEW.User_idUsers, @idNotification);
    END IF;
END$$

SHOW WARNINGS$$

USE `BrowseEventsDB`$$
DROP TRIGGER IF EXISTS `Cart_AFTER_INSERT` $$
SHOW WARNINGS$$
USE `BrowseEventsDB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BrowseEventsDB`.`Cart_AFTER_INSERT` AFTER INSERT ON `Cart` FOR EACH ROW
BEGIN
IF NEW.isAcquired = 1 THEN
		SET @nameEvent = (SELECT Name FROM `event` WHERE idEvent = NEW.Event_idEvent);
		SET @nameUser = (SELECT Username FROM User WHERE idUsers = NEW.User_idUsers);
		SET @emailUser = (SELECT Email FROM User WHERE idUsers = NEW.User_idUsers);
		SET @idOrganizer = (SELECT User_idUsers FROM `event` WHERE idEvent = NEW.Event_idEvent);

		INSERT INTO Notification (Title, Description) VALUE("Tickets bought ", CONCAT(@nameUser, " (email: ", @emailUser, ") has bought ", NEW.TicketQuantity, " tickets for the event ", @nameEvent, " on ", NEW.Date));
		SET @idNotification = (SELECT idNotification FROM Notification ORDER BY idNotification DESC LIMIT 1);

		
        IF @idOrganizer != NEW.User_idUsers THEN
			INSERT INTO user_has_notification (User_idUsers, Notification_idNotification) VALUES(@idOrganizer, @idNotification);
        END IF;
		INSERT INTO user_has_notification (User_idUsers, Notification_idNotification) VALUES(NEW.User_idUsers, @idNotification);
	END IF;
END$$

SHOW WARNINGS$$

USE `BrowseEventsDB`$$
DROP TRIGGER IF EXISTS `Cart_AFTER_UPDATE` $$
SHOW WARNINGS$$
USE `BrowseEventsDB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BrowseEventsDB`.`Cart_AFTER_UPDATE` AFTER UPDATE ON `Cart` FOR EACH ROW
BEGIN
	IF NEW.isAcquired = 1 AND OLD.isAcquired = 0 THEN
		SET @nameEvent = (SELECT Name FROM `event` WHERE idEvent = NEW.Event_idEvent);
		SET @nameUser = (SELECT Username FROM User WHERE idUsers = NEW.User_idUsers);
		SET @emailUser = (SELECT Email FROM User WHERE idUsers = NEW.User_idUsers);
		SET @idOrganizer = (SELECT User_idUsers FROM `event` WHERE idEvent = NEW.Event_idEvent);

		INSERT INTO Notification (Title, Description) VALUE("Tickets bought ", CONCAT(@nameUser, " (email: ", @emailUser, ") has bought ", NEW.TicketQuantity, " tickets for the event ", @nameEvent, " on ", NEW.Date));
		SET @idNotification = (SELECT idNotification FROM Notification ORDER BY idNotification DESC LIMIT 1);

		
        IF @idOrganizer != NEW.User_idUsers THEN
			INSERT INTO user_has_notification (User_idUsers, Notification_idNotification) VALUES(@idOrganizer, @idNotification);
        END IF;
		INSERT INTO user_has_notification (User_idUsers, Notification_idNotification) VALUES(NEW.User_idUsers, @idNotification);
	END IF;
END$$

SHOW WARNINGS$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `User`
-- -----------------------------------------------------
START TRANSACTION;
USE `BrowseEventsDB`;
INSERT INTO `User` (`idUsers`, `Username`, `Password`, `Email`, `FirstName`, `LastName`, `UserType_idUserType`, `VerificationCode`, `EmailStatus`, `LastLoginDate`, `isApproved`) VALUES (1, 'admin', '25f9e794323b453885f5181f1b624d0b', 'infobrowseevents@gmail.com', 'Admin', 'Admin', 1, NULL, 'verified', NULL, 1);
INSERT INTO `User` (`idUsers`, `Username`, `Password`, `Email`, `FirstName`, `LastName`, `UserType_idUserType`, `VerificationCode`, `EmailStatus`, `LastLoginDate`, `isApproved`) VALUES (2, 'organizer', '86099590d2ae57c4f7f4e993d395163d', 'andrea.farneti5@studio.unibo.it', 'Andrea', 'Farneti', 2, NULL, 'verified', NULL, 1);
INSERT INTO `User` (`idUsers`, `Username`, `Password`, `Email`, `FirstName`, `LastName`, `UserType_idUserType`, `VerificationCode`, `EmailStatus`, `LastLoginDate`, `isApproved`) VALUES (3, 'client', '3677b23baa08f74c28aba07f0cb6554e', 'andrea.pantieri@studio.unibo.it', 'Andrea', 'Pantieri', 3, NULL, 'verified', NULL, 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `UserType`
-- -----------------------------------------------------
START TRANSACTION;
USE `BrowseEventsDB`;
INSERT INTO `UserType` (`idUserType`, `Type`, `Description`) VALUES (1, 'Admin', 'Admin has all priviligies');
INSERT INTO `UserType` (`idUserType`, `Type`, `Description`) VALUES (2, 'Organizer', 'Organizer has limited priviligies');
INSERT INTO `UserType` (`idUserType`, `Type`, `Description`) VALUES (3, 'Client', 'Client can only buy tickets');

COMMIT;


-- -----------------------------------------------------
-- Data for table `Event`
-- -----------------------------------------------------
START TRANSACTION;
USE `BrowseEventsDB`;
INSERT INTO `Event` (`idEvent`, `Name`, `Datetime`, `Price`, `Place`, `TicketNumber`, `Description`, `Image`, `User_idUsers`, `LastModifyDate`) VALUES (1, 'Concerto Speed Stroke', '2020-09-10', 15, 'Cesena', 30, 'Concerto a Cesena della band Imolese Speed Stroke.', 'res/img/events/1/0.jpeg', 2, NULL);
INSERT INTO `Event` (`idEvent`, `Name`, `Datetime`, `Price`, `Place`, `TicketNumber`, `Description`, `Image`, `User_idUsers`, `LastModifyDate`) VALUES (2, 'Festival delle aurore boreali', '2020-12-10', 100, 'Finlandia', 100, 'Vieni a vedere le aurore boreali in Finlandia accompagnati da musica e cibo finlandese sotto le stelle.', 'res/img/events/2/0.jpeg', 2, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `Image`
-- -----------------------------------------------------
START TRANSACTION;
USE `BrowseEventsDB`;
INSERT INTO `Image` (`Image`, `Description`, `Event_idEvent`) VALUES ('res/img/events/1/0.jpeg', 'Immagine del concerto degli Speed Stroke a Cervia', 1);
INSERT INTO `Image` (`Image`, `Description`, `Event_idEvent`) VALUES ('res/img/events/2/0.jpeg', 'Immagine delle aurore boreali in Finlandia', 2);
INSERT INTO `Image` (`Image`, `Description`, `Event_idEvent`) VALUES ('res/img/events/2/1.jpeg', 'Immagine di un lago finlandese', 2);

COMMIT;


-- -----------------------------------------------------
-- Data for table `Category`
-- -----------------------------------------------------
START TRANSACTION;
USE `BrowseEventsDB`;
INSERT INTO `Category` (`idCategory`, `Name`, `Description`) VALUES (1, 'Concerts', 'Concerts');
INSERT INTO `Category` (`idCategory`, `Name`, `Description`) VALUES (2, 'Exhibitions', 'Exhibitions');
INSERT INTO `Category` (`idCategory`, `Name`, `Description`) VALUES (3, 'Festivals', 'Festivals');

COMMIT;


-- -----------------------------------------------------
-- Data for table `Category_has_Event`
-- -----------------------------------------------------
START TRANSACTION;
USE `BrowseEventsDB`;
INSERT INTO `Category_has_Event` (`Event_idEvent`, `Category_idCategory`) VALUES (1, 1);
INSERT INTO `Category_has_Event` (`Event_idEvent`, `Category_idCategory`) VALUES (2, 3);

COMMIT;

